# This file helps to eval the model online

import torch
import torch.nn as nn
from models.GTN2 import transformer_builder

from visualization import visualizeGraph, visualizeLoss
from data.dataset import PredictShortestPathDataset
from functions import prepare_data, save_checkpoint, is_correct, generate_enc_mas

# -- Device --
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(f'Chosen device for training: {device}')


# -- Initial setup --
edge_index_sample = torch.tensor([[0, 10, 0, 1, 1, 11, 1, 2, 2, 12, 2, 3, 2, 1, 3, 13, 3, 4, 3, 2, 4, 14, 4, 5, 4, 3, 5, 15, 5, 6, 5, 4, 6, 16, 6, 7, 6, 5, 7, 17, 7, 8, 7, 6, 8, 18, 8, 9, 8, 7, 9, 19, 9, 8, 10, 20, 10, 11, 11, 21, 11, 12, 11, 1, 12, 22, 12, 13, 12, 11, 12, 2, 13, 23, 13, 14, 13, 12, 13, 3, 14, 24, 14, 15, 14, 13, 14, 4, 15, 25, 15, 16, 15, 14, 15, 5, 16, 26, 16, 17, 16, 15, 16, 6, 17, 27, 17, 18, 17, 16, 17, 7, 18, 28, 18, 19, 18, 17, 18, 8, 19, 29, 19, 18, 19, 9, 20, 30, 20, 21, 20, 10, 21, 31, 21, 22, 21, 11, 22, 32, 22, 23, 22, 21, 22, 12, 23, 33, 23, 24, 23, 22, 23, 13, 24, 34, 24, 25, 24, 23, 24, 14, 25, 35, 25, 26, 25, 24, 25, 15, 26, 36, 26, 27, 26, 25, 26, 16, 27, 37, 27, 28, 27, 26, 27, 17, 28, 38, 28, 29, 28, 27, 28, 18, 29, 39, 29, 28, 29, 19, 30, 40, 30, 31, 30, 20, 31, 41, 31, 32, 31, 21, 32, 42, 32, 33, 32, 31, 32, 22, 33, 43, 33, 34, 33, 32, 33, 23, 34, 44, 34, 35, 34, 33, 34, 24, 35, 45, 35, 36, 35, 34, 35, 25, 36, 46, 36, 37, 36, 35, 36, 26, 37, 47, 37, 38, 37, 36, 37, 27, 38, 48, 38, 39, 38, 37, 38, 28, 39, 49, 39, 38, 39, 29, 40, 50, 40, 41, 40, 30, 41, 51, 41, 42, 41, 31, 42, 52, 42, 43, 42, 41, 42, 32, 43, 53, 43, 44, 43, 42, 43, 33, 44, 54, 44, 45, 44, 43, 44, 34, 45, 55, 45, 46, 45, 44, 45, 35, 46, 56, 46, 47, 46, 45, 46, 36, 47, 57, 47, 48, 47, 46, 47, 37, 48, 58, 48, 49, 48, 47, 48, 38, 49, 59, 49, 48, 49, 39, 50, 60, 50, 51, 50, 40, 51, 61, 51, 52, 51, 41, 52, 62, 52, 53, 52, 51, 52, 42, 53, 63, 53, 54, 53, 52, 53, 43, 54, 64, 54, 55, 54, 53, 54, 44, 55, 65, 55, 56, 55, 54, 55, 45, 56, 66, 56, 57, 56, 55, 56, 46, 57, 67, 57, 58, 57, 56, 57, 47, 58, 68, 58, 59, 58, 57, 58, 48, 59, 69, 59, 58, 59, 49, 60, 70, 60, 61, 60, 50, 61, 71, 61, 62, 61, 51, 62, 72, 62, 63, 62, 61, 62, 52, 63, 73, 63, 64, 63, 62, 63, 53, 64, 74, 64, 65, 64, 63, 64, 54, 65, 75, 65, 66, 65, 64, 65, 55, 66, 76, 66, 67, 66, 65, 66, 56, 67, 77, 67, 68, 67, 66, 67, 57, 68, 78, 68, 69, 68, 67, 68, 58, 69, 79, 69, 68, 69, 59, 70, 80, 70, 71, 70, 60, 71, 81, 71, 72, 71, 61, 72, 82, 72, 73, 72, 71, 72, 62, 73, 83, 73, 74, 73, 72, 73, 63, 74, 84, 74, 75, 74, 73, 74, 64, 75, 85, 75, 76, 75, 74, 75, 65, 76, 86, 76, 77, 76, 75, 76, 66, 77, 87, 77, 78, 77, 76, 77, 67, 78, 88, 78, 79, 78, 77, 78, 68, 79, 89, 79, 78, 79, 69, 80, 90, 80, 81, 80, 70, 81, 91, 81, 82, 81, 71, 82, 92, 82, 83, 82, 81, 82, 72, 83, 93, 83, 84, 83, 82, 83, 73, 84, 94, 84, 85, 84, 83, 84, 74, 85, 95, 85, 86, 85, 84, 85, 75, 86, 96, 86, 87, 86, 85, 86, 76, 87, 97, 87, 88, 87, 86, 87, 77, 88, 98, 88, 89, 88, 87, 88, 78, 89, 99, 89, 88, 89, 79, 90, 91, 90, 80, 91, 92, 91, 81, 92, 93, 92, 91, 92, 82, 93, 94, 93, 92, 93, 83, 94, 95, 94, 93, 94, 84, 95, 96, 95, 94, 95, 85, 96, 97, 96, 95, 96, 86, 97, 98, 97, 96, 97, 87, 98, 99, 98, 97, 98, 88, 99, 98, 99, 89], [10, 0, 1, 0, 11, 1, 2, 1, 12, 2, 3, 2, 1, 2, 13, 3, 4, 3, 2, 3, 14, 4, 5, 4, 3, 4, 15, 5, 6, 5, 4, 5, 16, 6, 7, 6, 5, 6, 17, 7, 8, 7, 6, 7, 18, 8, 9, 8, 7, 8, 19, 9, 8, 9, 20, 10, 11, 10, 21, 11, 12, 11, 1, 11, 22, 12, 13, 12, 11, 12, 2, 12, 23, 13, 14, 13, 12, 13, 3, 13, 24, 14, 15, 14, 13, 14, 4, 14, 25, 15, 16, 15, 14, 15, 5, 15, 26, 16, 17, 16, 15, 16, 6, 16, 27, 17, 18, 17, 16, 17, 7, 17, 28, 18, 19, 18, 17, 18, 8, 18, 29, 19, 18, 19, 9, 19, 30, 20, 21, 20, 10, 20, 31, 21, 22, 21, 11, 21, 32, 22, 23, 22, 21, 22, 12, 22, 33, 23, 24, 23, 22, 23, 13, 23, 34, 24, 25, 24, 23, 24, 14, 24, 35, 25, 26, 25, 24, 25, 15, 25, 36, 26, 27, 26, 25, 26, 16, 26, 37, 27, 28, 27, 26, 27, 17, 27, 38, 28, 29, 28, 27, 28, 18, 28, 39, 29, 28, 29, 19, 29, 40, 30, 31, 30, 20, 30, 41, 31, 32, 31, 21, 31, 42, 32, 33, 32, 31, 32, 22, 32, 43, 33, 34, 33, 32, 33, 23, 33, 44, 34, 35, 34, 33, 34, 24, 34, 45, 35, 36, 35, 34, 35, 25, 35, 46, 36, 37, 36, 35, 36, 26, 36, 47, 37, 38, 37, 36, 37, 27, 37, 48, 38, 39, 38, 37, 38, 28, 38, 49, 39, 38, 39, 29, 39, 50, 40, 41, 40, 30, 40, 51, 41, 42, 41, 31, 41, 52, 42, 43, 42, 41, 42, 32, 42, 53, 43, 44, 43, 42, 43, 33, 43, 54, 44, 45, 44, 43, 44, 34, 44, 55, 45, 46, 45, 44, 45, 35, 45, 56, 46, 47, 46, 45, 46, 36, 46, 57, 47, 48, 47, 46, 47, 37, 47, 58, 48, 49, 48, 47, 48, 38, 48, 59, 49, 48, 49, 39, 49, 60, 50, 51, 50, 40, 50, 61, 51, 52, 51, 41, 51, 62, 52, 53, 52, 51, 52, 42, 52, 63, 53, 54, 53, 52, 53, 43, 53, 64, 54, 55, 54, 53, 54, 44, 54, 65, 55, 56, 55, 54, 55, 45, 55, 66, 56, 57, 56, 55, 56, 46, 56, 67, 57, 58, 57, 56, 57, 47, 57, 68, 58, 59, 58, 57, 58, 48, 58, 69, 59, 58, 59, 49, 59, 70, 60, 61, 60, 50, 60, 71, 61, 62, 61, 51, 61, 72, 62, 63, 62, 61, 62, 52, 62, 73, 63, 64, 63, 62, 63, 53, 63, 74, 64, 65, 64, 63, 64, 54, 64, 75, 65, 66, 65, 64, 65, 55, 65, 76, 66, 67, 66, 65, 66, 56, 66, 77, 67, 68, 67, 66, 67, 57, 67, 78, 68, 69, 68, 67, 68, 58, 68, 79, 69, 68, 69, 59, 69, 80, 70, 71, 70, 60, 70, 81, 71, 72, 71, 61, 71, 82, 72, 73, 72, 71, 72, 62, 72, 83, 73, 74, 73, 72, 73, 63, 73, 84, 74, 75, 74, 73, 74, 64, 74, 85, 75, 76, 75, 74, 75, 65, 75, 86, 76, 77, 76, 75, 76, 66, 76, 87, 77, 78, 77, 76, 77, 67, 77, 88, 78, 79, 78, 77, 78, 68, 78, 89, 79, 78, 79, 69, 79, 90, 80, 81, 80, 70, 80, 91, 81, 82, 81, 71, 81, 92, 82, 83, 82, 81, 82, 72, 82, 93, 83, 84, 83, 82, 83, 73, 83, 94, 84, 85, 84, 83, 84, 74, 84, 95, 85, 86, 85, 84, 85, 75, 85, 96, 86, 87, 86, 85, 86, 76, 86, 97, 87, 88, 87, 86, 87, 77, 87, 98, 88, 89, 88, 87, 88, 78, 88, 99, 89, 88, 89, 79, 89, 91, 90, 80, 90, 92, 91, 81, 91, 93, 92, 91, 92, 82, 92, 94, 93, 92, 93, 83, 93, 95, 94, 93, 94, 84, 94, 96, 95, 94, 95, 85, 95, 97, 96, 95, 96, 86, 96, 98, 97, 96, 97, 87, 97, 99, 98, 97, 98, 88, 98, 98, 99, 89, 99]], dtype=torch.long).to(device)
edge_set_sample = set(zip(edge_index_sample[0].tolist(), edge_index_sample[1].tolist()))

X = torch.tensordtype=torch.long).to(device)


# -- Prompt mode --
mode = input("1 - Check if a path is connected\n2 - Find optimal path\nWhat would you like to do: ")


# -- Evaluation --
if mode == '1':
  print("\nCheck if a path is connected ----------------")
  path = input("Path with spaces between node ids: ")
  src = input("Source: ")
  dest = input("Destination: ")

  X[int(src)] = torch.tensor([5], dtype=torch.long)
  X[int(dest)] = torch.tensor([10], dtype=torch.long)

  path = [int(i) for i in path.split()]
  path = torch.tensor(path, dtype=torch.long)

  if is_correct(X, edge_set_sample, path) == 1:
    print("The path is Connected")
  else:
    print("The path is Disconnected")
  

elif mode == '2':
  # -- Model & Optimizer & Criterion --
  config = {
    "num_nodes": 100
  }

  checkpoint, model = transformer_builder( src_num_nodes=config['num_nodes'], tgt_num_nodes=config['num_nodes'], max_src_len=config['num_nodes']+1, max_tgt_len=config['num_nodes']+1, d_model=512, num_encoderBlocks=6, num_attnHeads=8, dropout=0.1, d_ff=2048, resume=True )
  model.to(device)


  # -- Load model & optimizer --
  # if ( True ):
  #   checkpoint = torch.load('./savedGrads/checkpoint.pth.tar')
  #   model.load_state_dict(checkpoint['model_state_dict'])
  model.eval()

  print("\nFind optimal path ------------------------")
  src = input("Source: ")
  dest = input("Destination: ")

  X[int(src)] = torch.tensor([5], dtype=torch.long)
  X[int(dest)] = torch.tensor([10], dtype=torch.long)

  encoder_mask = generate_enc_mas(num_nodes=config['num_nodes'], edge_set=edge_set_sample).to(device)

  prediction, _ = model( X, None, edge_index_sample, encoder_mask, config['num_nodes']+1, device)

  print(prediction)

else:
  print("Invalid input")


